'''Задание на сумму знакопеременного ряда. (наличие комментариев для каждого функционально законченного блока обязательно)
Вариант 25 - Вычислить сумму знакопеременного ряда |х*(3n-1)!|/(3n-1)!, 
где х-матрица ранга к (к и матрица задаются случайным образом), n - номер слагаемого. 
Сумма считается вычисленной, если точность вычислений будет не меньше t знаков после запятой. 
У алгоритма д.б. линейная сложность. Операция умножения –поэлементная. Знак первого слагаемого  +.
'''


import numpy as np

def s_sum(x, t):
    n = 1  # Номер слагаемого
    curr_x = np.copy(x)  # Копия матрицы x
    res = 0  # Результат суммы
    sign = 1  # Знак слагаемого

    while True:
        det_curr_x = np.linalg.det(curr_x)  # Вычисление определителя матрицы curr_x
        curr_term = sign * det_curr_x / (3 * n - 1)  # Вычисление текущего слагаемого
        res += curr_term  # Добавление значения слагаемого к результату

        if np.abs(curr_term) < 1 / (10 ** t):  # Проверка точности вычислений
            break

        n += 1  # Увеличение номера слагаемого
        sign = -sign  # Смена знака слагаемого
        curr_x = np.dot(curr_x, x)  # Матричное умножение curr_x и x для получения следующей степени

    return res

try:
    t = int(input("Введите число t, являющееся количеством знаков после запятой (точностью):\n"))
    while t > 300 or t < 1:  # Проверка корректности введенного значения t
        t = int(input("Вы ввели недопустимое значение t. Введите число t, большее или равное 1:\n"))

    k = np.random.randint(1, 10)  # Генерация случайного целого числа k
    x = np.random.uniform(-1, 1, (k, k))  # Генерация случайной матрицы x


    print("Сгенерированная матрица:")
    print(x)
    print()

    result = s_sum(x, t)  # Вычисление суммы знакопеременного ряда

    print(f"Сумма ряда с точностью {t} знаков после запятой: {result:.{t}f}".rstrip('0').rstrip('.'))

except ValueError:
    print("\nОшибка: Введенный символ не является числом. Повторите ввод.")